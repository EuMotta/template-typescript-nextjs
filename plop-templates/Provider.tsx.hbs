/* eslint-disable @typescript-eslint/no-explicit-any */
'use client';
import { ReactNode, createContext, useContext, ReactElement } from 'react';

type ContextType = {
  data: any;
  loading: boolean;
};

const {{pascalCase name}}Context = createContext<ContextType | null>(null);

export function use{{pascalCase name}}() {
  const context = useContext({{pascalCase name}}Context);
  if (!context) {
    throw new Error('use{{pascalCase name}} must be used within a {{pascalCase name}}Provider');
  }
  return context;
}

interface {{pascalCase name}}ProviderProps {
  data: any;
  loading: boolean;
  children: ReactNode;
}

export function {{pascalCase name}}Provider({
  data,
  loading,
  children,
}: {{pascalCase name}}ProviderProps): ReactElement {
  const contextValue: ContextType = {
    data,
    loading,
  };

  return (
    <{{pascalCase name}}Context.Provider value={contextValue}>
      {children}
    </{{pascalCase name}}Context.Provider>
  );
}
